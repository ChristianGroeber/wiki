{"version":3,"sources":["app/src/helpers/queryFormatter.js","app/src/stores/modules/auth/index.js","app/src/stores/modules/main/index.js","app/src/stores/modules/months/index.js"],"names":["queryFormatter","data","Object","keys","map","key","join","state","token","mutations","UPDATE_TOKEN","payload","localStorage","setItem","actions","register","method","url","headers","changePassword","commit","then","response","requestNewPassword","restorePassword","generateNewToken","getItem","removeItem","getters","authModule","isLoading","showEditSpecificPopup","pageTitle","LOADING","EDIT_SPECIFIC_POPUP","setTitle","title","document","buildCache","asdf","axios","post","loading","mainModule","entries","editingEntry","editingGallery","UPDATE_EDITING_ENTRY","UPDATE_ENTRIES","UPDATE_EDITING_GALLERY","getEntries","get","updateEntry","entry","saveEntry","content","btoa","raw_content","id","getEntry","deleteEntry","delete","loadImagesForEntry","images","gallery","monthsModule"],"mappings":"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","file":"dist/app.js","sourcesContent":["function queryFormatter(data) {\n    return Object.keys(data)\n        .map((key) => key + '=' + data[key])\n        .join('&')\n}\n\nexport {\n    queryFormatter\n}","import axios from 'axios';\nimport {\n    queryFormatter\n} from '../../../helpers/queryFormatter';\n\nconst state = {\n    token: null,\n};\n\nconst mutations = {\n    UPDATE_TOKEN(state, payload) {\n        localStorage.setItem('token', payload);\n        state.token = payload;\n    },\n}\n\nconst actions = {\n    register(payload) {\n        return axios({\n            method: 'POST',\n            url: '/api/auth/register',\n            data: queryFormatter(payload),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        });\n    },\n    changePassword({\n        commit\n    }, payload) {\n        return axios({\n            method: 'POST',\n            url: '/api/auth/change-password',\n            data: queryFormatter(payload),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        }).then((response) => {\n            commit('UPDATE_TOKEN', response.data.token);\n        });\n    },\n    requestNewPassword({\n        commit\n    }, payload) {\n        return axios({\n            method: 'POST',\n            url: '/api/auth/request-new-password',\n            data: queryFormatter(payload),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        });\n    },\n    restorePassword({\n        commit\n    }, payload) {\n        return axios({\n            method: 'POST',\n            url: '/api/auth/restore-password',\n            data: queryFormatter(payload),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        }).then((response) => {\n            commit('UPDATE_TOKEN', response.data.token);\n        });\n    },\n    generateNewToken({\n        commit\n    }, payload) {\n        return axios({\n            method: 'POST',\n            url: '/api/auth/generate-new-token',\n            data: queryFormatter(payload),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        }).then((response) => {\n            commit('UPDATE_TOKEN', response.data.token);\n        });\n    },\n    register({\n        commit\n    }, payload) {\n        return axios({\n            method: 'POST',\n            url: '/api/auth/register',\n            data: queryFormatter(payload),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        }).then((response) => {\n            commit('UPDATE_TOKEN', response.data.token);\n        });\n    },\n    login({\n        commit\n    }, payload) {\n        return axios({\n            method: 'POST',\n            url: '/api/login',\n            data: queryFormatter(payload),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        }).then((response) => {\n            commit('UPDATE_TOKEN', response.data.token);\n        });\n    },\n    getToken({\n        commit\n    }) {\n        const token = localStorage.getItem('token');\n        if (token) {\n            commit('UPDATE_TOKEN', token);\n        }\n    },\n    logout({\n        commit\n    }) {\n        commit('UPDATE_TOKEN', null);\n        localStorage.removeItem('token');\n    },\n}\n\nconst getters = {\n    token: state => state.token,\n}\n\nconst authModule = {\n    state,\n    mutations,\n    actions,\n    getters,\n}\n\nexport default authModule;","import axios from 'axios';\n\nconst state = {\n    isLoading: false,\n    showEditSpecificPopup: false,\n    pageTitle: '2022',\n};\n\nconst mutations = {\n    LOADING(state, isLoading) {\n        state.isLoading = isLoading;\n    },\n    EDIT_SPECIFIC_POPUP(state, showEditSpecificPopup) {\n        state.showEditSpecificPopup = showEditSpecificPopup;\n    },\n}\n\nconst actions = {\n    setTitle({\n        commit\n    }, title) {\n        if (title === '2022') {\n            document.title = '2022';\n        } else {\n            document.title = title + ' · 2022';\n        }\n        state.pageTitle = title;\n    },\n    buildCache(asdf, token) {\n        axios.post('/api/admin/build-cache?token=' + token);\n    },\n}\n\nconst getters = {\n    loading: state => state.isLoading,\n    showEditSpecificPopup: state => state.showEditSpecificPopup,\n    pageTitle: state => state.pageTitle,\n}\n\nconst mainModule = {\n    state,\n    mutations,\n    actions,\n    getters,\n}\n\nexport default mainModule;","import axios from 'axios'\nimport {\n  queryFormatter\n} from '../../../helpers/queryFormatter'\n\nconst state = {\n  entries: [],\n  editingEntry: {},\n  editingGallery: {},\n}\n\nconst mutations = {\n  UPDATE_EDITING_ENTRY(state, payload) {\n    state.editingEntry = payload\n  },\n  UPDATE_ENTRIES(state, payload) {\n    state.entries = payload\n  },\n  UPDATE_EDITING_GALLERY(state, payload) {\n    state.editingGallery = payload\n  },\n}\n\nconst actions = {\n  getEntries({\n    commit\n  }) {\n    axios.get('/api/entries').then((response) => {\n      commit('UPDATE_ENTRIES', response.data)\n    })\n  },\n  updateEntry({\n    commit\n  }, payload) {\n    commit('UPDATE_EDITING_ENTRY', payload.entry)\n  },\n  saveEntry({\n    commit\n  }, token) {\n    const data = {\n      token: token,\n      content: btoa(getters.editingEntry(state).raw_content),\n      entry: getters.editingEntry(state).id,\n    }\n    return axios({\n      method: 'post',\n      url: '/api/admin/entry/edit',\n      data: queryFormatter(data),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    })\n  },\n  getEntry({\n    commit\n  }, payload) {\n    return axios\n      .get('/api/admin/entry/edit?entry=' + payload.entry + '&token=' + payload.token)\n      .then((response) => {\n        commit('UPDATE_EDITING_ENTRY', response.data)\n      })\n  },\n  deleteEntry({\n    commit\n  }, payload) {\n    return axios.delete('/api/admin/entry/delete?' + queryFormatter(payload))\n  },\n  loadImagesForEntry({\n    commit\n  }, payload) {\n    return axios.get('/api/admin/entry/images/load?entry=' + payload.entry).then((response) => {\n      commit('UPDATE_EDITING_GALLERY', response.data.images);\n    })\n  }\n}\n\nconst getters = {\n  entries: (state) => state.entries,\n  editingEntry: (state) => state.editingEntry,\n  gallery: (state) => state.editingGallery,\n}\n\nconst monthsModule = {\n  state,\n  mutations,\n  actions,\n  getters,\n}\n\nexport default monthsModule"]}